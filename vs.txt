#define _CRT_SECURE_NO_WARNINGS 
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <ctype.h>
#define SIZE 1000

FILE* f;
FILE* g;
FILE* h;
int p = 0;
int k = 0;
int col = 0;
char prob[] = "    ";

void PrintProbel(int k) {
	int l = k * 2;
	while (l != 0) {
		fprintf(g, " ");
		l--;
	}
}

void Format(char* str) {
	int n = strlen(str);
	for (int i = 0; i < n; ++i) {
		if (str[i] == '/' && str[i + 1] == '/') {
			fprintf(g, " /*");
			i += 2;
			while (str[i] != '\n') {
				fprintf(g, "%c", str[i]);
				i++;
			}
			fprintf(g, "*/\n");
			PrintProbel(k);
			p = 1;
		}
		else if (str[i] == ';') {
			if (str[i + 1] == '/')
				fprintf(g, "%c", str[i]);
			else if (str[i + 1] == ' ') {
				fprintf(g, "%c", str[i]);
			}
			else {
				fprintf(g, "%c\n", str[i]);
				PrintProbel(k);
			}
			p = 1;
		}
		else if (str[i] == '#' && i != 0) {
			fprintf(g, "\n%c", str[i]);
		}
		else if (str[i] == ',') {
			fprintf(g, "%c ", str[i]);
		}
		else if ((str[i] == '+' && str[i + 1] != '+' && str[i - 1] != '+' && str[i + 1] <= '9' && str[i + 1] >= '0')
			|| str[i] == '-' || (str[i] == '*' && (str[i + 1] <= '9' && str[i + 1] >= '0')) || str[i] == '<' ||
			str[i] == '>') {
			fprintf(g, " %c ", str[i]);
		}
		else if ((str[i] == '=' || str[i] == '<' || str[i] == '>') && str[i + 1] == '=') {
			fprintf(g, " %c%c ", str[i], str[i + 1]);
			i++;
		}
		else if (str[i] == '+' && str[i + 1] == '=') {
			fprintf(g, " %c%c ", str[i], str[i + 1]);
			i++;
		}
		else if (str[i] == '!' && str[i + 1] == '=') {
			fprintf(g, " %c%c ", str[i], str[i + 1]);
			i++;
		}
		else if (str[i] == '=') {
			fprintf(g, " %c ", str[i]);
		}
		else if (str[i] == '%' && (str[i + 1] <= '9' && str[i + 1] >= '0')) {
			fprintf(g, " %c ", str[i]);
		}
		else if (str[i] == '}' && p == 1) {
			fprintf(g, "%c\n", str[i]);
			p = 1;
			k--;
			PrintProbel(k);
		}
		else if (str[i] == '}' && p == 0) {
			PrintProbel(k);
			fprintf(g, "\n%c\n", str[i]);
			p = 1;
			k--;
			PrintProbel(k);
		}
		else if (str[i] == '{' && p == 0) {
			k++;
			PrintProbel(k);
			fprintf(g, "\n");
			PrintProbel(k);
			fprintf(g, "%c\n", str[i]);
			p = 1;
			PrintProbel(k);
		}
		else if (str[i] == '{' && p == 1) {
			k++;
			fprintf(g, "%c\n", str[i]);
			p = 1;
			PrintProbel(k);

		}
		else if (p == 0 && str[i] == '\n') {
			fprintf(g, "%c", str[i]);
			p = 1;
			PrintProbel(k);
		}
		else if (str[i] != '\n') {
			fprintf(g, "%c", str[i]);
			p = 0;
		}
	}
}

int Recyr() {
	fseek(g, 0L, SEEK_SET);
	char str[SIZE] = { 0 };
	int n = 0, kp = 0;
	while (fgets(str, 300, g) != NULL) {
		n = strlen(str);
		for (int i = 0; i < n; i++) {
			if (str[i] == 'r' && str[i + 1] == 'e' && str[i + 2] == 't' && str[n - 3] == ')') {
				kp = 1;
				break;
			}
		}
	}
	fseek(g, 0L, SEEK_END);
	if (kp == 0)
		return 0;
	else return 1;
}

int push_char(char stack[], unsigned cur, char symb)
{
	if (cur < SIZE)
	{
		stack[cur++] = symb;
	}
	return cur;
}

int pop_char(char stack[], unsigned cur)
{
	if (cur != 0)
	{
		--cur;
	}
	return cur;
}

int is_empty_char(const char stack[], unsigned cur)
{
	return !cur;
}
int Cycle() {
	int cy = 0;
	int br = 0;
	int pr = 0;
	char str[SIZE] = { 0 };
	fclose(g);
	g = fopen("output.txt", "rt");
	while (fgets(str, 300, g) != NULL) {
		int n = strlen(str);
		for (int i = 0; i < n; i++) {
			if (str[i] == 'f' && str[i + 1] == 'o' && str[i + 2] == 'r') {
				for (int j = i + 2; j < n; j++) {
					if (str[j] == ';')
						pr++;
					if (pr == 2) {
						if (str[j] == 'i' && str[j + 1] != '-' && str[j + 2] != '-' && str[j + 1] != '+' && str[j + 2] != '+')
							cy++;
						if ((str[j] == '+' || str[j] == '-') && str[j + 1] != '+' && str[j + 1] != '-' && str[j + 2] != 'i')
							cy++;
					}
				}
			}
			if (str[i] == 'w' && str[i + 1] == 'h' && str[i + 2] == 'i' && str[i + 3] == 'l' && str[i + 4] == 'e') {
				for (int j = i + 4; j < n; j++) {
					if (str[j] == '(' && str[j + 1] == '1' && str[j + 2] == ')') {
						cy++;
					}
				}
			}
			if (str[i] == 'b' && str[i + 1] == 'r' && str[i + 2] == 'e' && str[i + 3] == 'a' && str[i + 4] == 'k') {
				br = 1;
			}
		}
		pr = 0;
	}
	if (cy > 0 && br == 1)
		cy = 0;
	return cy;
}
int NaZna() {
	fseek(g, 0L, SEEK_SET);
	char str[SIZE] = { 0 };
	int p = 0, n = 0, k = 1, flag = 0;
	while (fgets(str, 300, g) != NULL) {
		n = strlen(str);
		if (n < 3) continue;
		for (int i = 0; i < n; i++) {
			if (isspace(str[i])) continue;
			if (str[n - 2] == ';' && (str[i] == 'i' && str[i + 1] == 'n' || str[i] == 'd' && str[i + 1] == 'o' || str[i] == 'f' && str[i + 1] == 'l')) {
				for (i; i < n; ++i) {
					if (str[i] == ',')
						k++;
					if (str[i] == '=' && isdigit(str[i + 2]))
						++p;
				}
			}
			else break;
		}

		if (k >= 1 && k == p) {
			flag = 1;
			p = 0;
			k = 1;
		}

		else if (k > 1) {
			fgets(str, 300, g);
			n = strlen(str);
			for (int i = 0; i < n; i++) {
				if (isspace(str[i]))
					continue;
				else if (str[i] == 's' && str[i + 1] == 'c' && str[i + 7] == '%') {
					for (i; i < n; ++i) {
						if (str[i] == '%') {
							++p;
						}
					}
					break;
				}
				else {
					fseek(g, 0L, SEEK_CUR);
					flag = 10;
					p = 0;
					k = 1;
					break;
				}
			}

		}


	}
	fseek(g, 0L, SEEK_END);

	if (flag == 10)
		return 10;
	else
		return 1;


}

int main(){
f = fopen("input.txt", "rt");
g = fopen("output.txt", "wt");
char str[SIZE] = { 0 };
int w = 0, m = 0, r = -5, cy = 0;
     while (fgets(str, 300, f) != NULL) {
	     Format(str);
      }
      fclose(g);
      g = fopen("output.txt", "rt");
      h = fopen("rezput.txt", "wt");
      cy = Cycle();
	if (cy == 0)
		fprintf(h, "Зацикленности нет\n");
	else
		fprintf(h, "Зацикленность есть\n");v
     fclose(g);
     g = fopen("output.txt", "rt");
     fprintf(h, "\nОтформатированная программа:\n\n");
	while (fgets(str, 300, g) != NULL) {
		fprintf(h, "%s", str);
	}
}
